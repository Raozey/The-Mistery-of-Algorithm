// 二叉书用c++写的结构体
struct TreeNode{
  int val;
  TreeNode* left;
  TreeNode* right;
  TreeNode(int x) : val(x), , left(nullptr), right(nullptr) {}
  TreeNode(int x, TreeNode* l, TreeNode* r) : val(x), left(l), right(r) {}
};

// 二叉树的种类
1、满二叉树：每个节点的度为0或者2，并且所有度为0的节点再同一层（最底层）。
2、完全二叉树：除最底层外，其他层必须全部填满，且最底层的节点要集中再该层的左边若干位置。
   若最底层是第n层，该层含有的节点数为[1,2^(n-1)]
3、二叉搜索树，是一棵有序树， 左<中<右。
4、平衡二叉搜索树，左右子树的高度差不超过1，并且左右子树都是一棵平衡二叉搜索树。
5、红黑树，自平衡二叉查找树(查找复杂度O(logN))，高度近似为log(N)，其中N是树中节点的数量，
          每个节点增加了一个存储位记录节点的颜色，可以是RED,也可以是BLACK，
          插入或删除节点时会通过一系列旋转操作来保持树的平衡,
          可以防止二叉查找树退化为链表(查找复杂度O(N))，从而保证了树的查找、插入和删除等基本操作具有比较稳定的时间复杂度。   
6、B树，平衡多路查找树，b树高度通过调整节点的度可以控制，同一个结点中的所有关键字升序排列，
       ,查找操作的时间复杂度为O(mlogmn)。其中m为B树的阶数（每个结点最多有m-1个关键字），n为B树中节点的数目
7、B+树，B+树是应文件系统所需而产生的一种B树的变形树,有k个子树的中间节点包含有k个元素（B树中是k-1个元素），
        每个元素不保存数据，只用来索引，所有数据都保存在叶子节点。 
        B+树相邻的叶子节点之间是通过链表指针连起来的，也可以很方便地进行范围查询、顺序访问等操作。
        

  
